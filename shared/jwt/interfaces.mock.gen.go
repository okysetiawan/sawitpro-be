// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package jwt is a generated GoMock package.
package jwt

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSigner is a mock of Signer interface.
type MockSigner struct {
	ctrl     *gomock.Controller
	recorder *MockSignerMockRecorder
}

// MockSignerMockRecorder is the mock recorder for MockSigner.
type MockSignerMockRecorder struct {
	mock *MockSigner
}

// NewMockSigner creates a new mock instance.
func NewMockSigner(ctrl *gomock.Controller) *MockSigner {
	mock := &MockSigner{ctrl: ctrl}
	mock.recorder = &MockSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSigner) EXPECT() *MockSignerMockRecorder {
	return m.recorder
}

// CreateAccessToken mocks base method.
func (m *MockSigner) CreateAccessToken(userId int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessToken indicates an expected call of CreateAccessToken.
func (mr *MockSignerMockRecorder) CreateAccessToken(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MockSigner)(nil).CreateAccessToken), userId)
}

// ParseWithClaims mocks base method.
func (m *MockSigner) ParseWithClaims(token string) (*Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseWithClaims", token)
	ret0, _ := ret[0].(*Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseWithClaims indicates an expected call of ParseWithClaims.
func (mr *MockSignerMockRecorder) ParseWithClaims(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseWithClaims", reflect.TypeOf((*MockSigner)(nil).ParseWithClaims), token)
}
